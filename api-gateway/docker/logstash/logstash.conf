input {
  file {
    type => "product-service"
    mode => "tail"
    path => "/usr/share/logstash/ingest_data/product-service-logs.csv"
    start_position => "beginning"
  }
  file {
    type => "order-service"
    mode => "tail"
    path => "/usr/share/logstash/ingest_data/order-service-logs.csv"
    start_position => "beginning"
  }
  file {
    type => "inventory-service"
    mode => "tail"
    path => "/usr/share/logstash/ingest_data/inventory-service-logs.csv"
    start_position => "beginning"
  }
  file {
    type => "api-gateway"
    mode => "tail"
    path => "/usr/share/logstash/ingest_data/apigateway-logs.csv"
    start_position => "beginning"
  }
}

filter {
  # Set the csv format for the log files for each service type
  if [type] == "product-service" or [type] == "api-gateway" or [type] == "order-service" or [type] == "inventory-service" {
    csv {
      separator => ","
      columns => ["DateTime","Severity","EpochTime","ErrorType","Service","EndPoint","DataVal1","DataVal2","Message", "Request_ID"]
    }
  }

  # Replace some filters with EMPTY string if they are missing for product-service, apigateway-logs, order-service, and inventory-service
  if [type] == "product-service" or [type] == "api-gateway" or [type] == "order-service" or [type] == "inventory-service" {
    if ![DataVal1] or [DataVal1] == "" {
      mutate { replace => { "DataVal1" => "" } }
    }
    if ![DataVal2] or [DataVal2] == "" {
      mutate { replace => { "DataVal2" => "" } }
    }
    if ![Message] or [Message] == "" {
      mutate { replace => { "Message" => "" } }
    }
    if ![Request_ID] or [Request_ID] == "" {
      mutate { replace => { "Request_ID" => "" } }
    }

    # Make a HTTP request to the API serving the trained model for predictions
    http {
      url => "http://servemodel_fast_api:8088/addentry"
      verb => "POST"  # HTTP method, can be GET, POST, etc.
      query => {
        "date" => "%{[DateTime]}"
        "severity" => "%{[Severity]}"
        "epoch" => "%{[EpochTime]}"
        "error_type" => "%{[ErrorType]}"
        "service" => "%{[Service]}"
        "endpoint" => "%{[EndPoint]}"
        "data1" => "%{[DataVal1]}"
        "data2" => "%{[DataVal2]}"
        "message" => "%{[Message]}"
        "uuid" => "%{[Request_ID]}"
      }
      target_body => "req_answer_body"  # Store the HTTP response body in this field
      target_headers => "req_answer_header"  # Optionally store response headers
    }
  }
}

output {
  # Send logs to Elasticsearch
  elasticsearch {
    index => "logstash-%{+YYYY.MM.dd}"
    hosts => "${ELASTIC_HOSTS}"
    user => "${ELASTIC_USER}"
    password => "${ELASTIC_PASSWORD}"
    cacert => "certs/ca/ca.crt"
  }

  # Additional output to a single log file
  file {
    path => "/usr/share/logstash/ingest_data/system_unified_log.csv"
    codec => "line"  # Or "json_lines" if you prefer plain text
  }
}
